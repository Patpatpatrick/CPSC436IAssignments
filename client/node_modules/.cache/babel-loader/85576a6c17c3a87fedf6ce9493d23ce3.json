{"ast":null,"code":"export const ITEMS_HAS_ERRORED = 'ITEMS_HAS_ERRORED';\nexport const ITEMS_IS_LOADING = 'ITEMS_IS_LOADING';\nexport const FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS';\nexport const DONE_FETCHING = 'DONE_FETCHING';\nexport const hasErrored = bool => {\n  return {\n    type: ITEMS_HAS_ERRORED,\n    hasErrored: bool\n  };\n};\nexport const isLoading = bool => {\n  return {\n    type: ITEMS_IS_LOADING,\n    isLoading: bool\n  };\n}; // Redux-thunk, \n\nexport const fetchData = url => {\n  // it returns a function!!!!\n  return dispatch => {\n    dispatch(isLoading(true));\n    fetch(url).then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n\n      dispatch(isLoading(false));\n      return response;\n    }).then(response => {\n      return response.json();\n    }).then(items => {\n      dispatch(fetchDataSuccess(items));\n    }).then(doneFetching()).catch(() => dispatch(hasErrored(true)));\n  };\n};\nexport const fetchSingleItem = (url, index) => {\n  return dispatch => {\n    dispatch(isLoading(true));\n    fetch(url, {\n      method: 'GET',\n      mode: 'cors',\n      body: JSON.stringify({\n        index\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n\n      dispatch(isLoading(false));\n      return response;\n    }).then(response => {\n      return response.json();\n    }).then(item => {\n      dispatch(fetchDataSuccess(item));\n    }).then(doneFetching()).catch(() => dispatch(hasErrored(true)));\n  };\n};\nexport const fetchDataSuccess = items => {\n  return {\n    type: FETCH_DATA_SUCCESS,\n    items // this is ES6 property, it means \"items\":items or items:items\n\n  };\n};","map":{"version":3,"sources":["/Users/mac/Workspaces/cpsc436assignment2/client/src/actions/fetchActions.js"],"names":["ITEMS_HAS_ERRORED","ITEMS_IS_LOADING","FETCH_DATA_SUCCESS","DONE_FETCHING","hasErrored","bool","type","isLoading","fetchData","url","dispatch","fetch","then","response","ok","Error","statusText","json","items","fetchDataSuccess","doneFetching","catch","fetchSingleItem","index","method","mode","body","JSON","stringify","headers","item"],"mappings":"AAAA,OAAO,MAAMA,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AAGP,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAChC,SAAO;AACHC,IAAAA,IAAI,EAAEN,iBADH;AAEHI,IAAAA,UAAU,EAAEC;AAFT,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,SAAS,GAAIF,IAAD,IAAU;AAC/B,SAAO;AACHC,IAAAA,IAAI,EAAEL,gBADH;AAEHM,IAAAA,SAAS,EAAEF;AAFR,GAAP;AAIH,CALM,C,CAOP;;AACA,OAAO,MAAMG,SAAS,GAAIC,GAAD,IAAS;AAC9B;AACA,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACH,SAAS,CAAC,IAAD,CAAV,CAAR;AACAI,IAAAA,KAAK,CAACF,GAAD,CAAL,CACKG,IADL,CACWC,QAAD,IAAc;AAChB,UAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AACd,cAAMC,KAAK,CAACF,QAAQ,CAACG,UAAV,CAAX;AACH;;AACDN,MAAAA,QAAQ,CAACH,SAAS,CAAC,KAAD,CAAV,CAAR;AACA,aAAOM,QAAP;AACH,KAPL,EAQKD,IARL,CAQWC,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACI,IAAT,EAAP;AACH,KAVL,EAWKL,IAXL,CAWWM,KAAD,IAAW;AACbR,MAAAA,QAAQ,CAACS,gBAAgB,CAACD,KAAD,CAAjB,CAAR;AACH,KAbL,EAaON,IAbP,CAaYQ,YAAY,EAbxB,EAcKC,KAdL,CAcW,MAAMX,QAAQ,CAACN,UAAU,CAAC,IAAD,CAAX,CAdzB;AAeH,GAjBD;AAkBH,CApBM;AAsBP,OAAO,MAAMkB,eAAe,GAAG,CAACb,GAAD,EAAKc,KAAL,KAAe;AAC1C,SAAQb,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACH,SAAS,CAAC,IAAD,CAAV,CAAR;AACAI,IAAAA,KAAK,CAACF,GAAD,EAAM;AACPe,MAAAA,MAAM,EAAE,KADD;AAEPC,MAAAA,IAAI,EAAE,MAFC;AAGPC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACL,QAAAA;AAAD,OAAf,CAHC;AAIPM,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAJF,KAAN,CAAL,CAMKjB,IANL,CAMWC,QAAD,IAAc;AAChB,UAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AACd,cAAMC,KAAK,CAACF,QAAQ,CAACG,UAAV,CAAX;AACH;;AACDN,MAAAA,QAAQ,CAACH,SAAS,CAAC,KAAD,CAAV,CAAR;AACA,aAAOM,QAAP;AACH,KAZL,EAaKD,IAbL,CAaWC,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACI,IAAT,EAAP;AACH,KAfL,EAgBKL,IAhBL,CAgBWkB,IAAD,IAAU;AACZpB,MAAAA,QAAQ,CAACS,gBAAgB,CAACW,IAAD,CAAjB,CAAR;AACH,KAlBL,EAmBKlB,IAnBL,CAmBUQ,YAAY,EAnBtB,EAoBKC,KApBL,CAoBW,MAAMX,QAAQ,CAACN,UAAU,CAAC,IAAD,CAAX,CApBzB;AAqBH,GAvBD;AAwBH,CAzBM;AA4BP,OAAO,MAAMe,gBAAgB,GAAID,KAAD,IAAW;AACvC,SAAO;AACHZ,IAAAA,IAAI,EAAEJ,kBADH;AAEHgB,IAAAA,KAFG,CAEG;;AAFH,GAAP;AAIH,CALM","sourcesContent":["export const ITEMS_HAS_ERRORED = 'ITEMS_HAS_ERRORED'\nexport const ITEMS_IS_LOADING = 'ITEMS_IS_LOADING'\nexport const FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS'\nexport const DONE_FETCHING = 'DONE_FETCHING'\n\n\nexport const hasErrored = (bool) => {\n    return {\n        type: ITEMS_HAS_ERRORED,\n        hasErrored: bool\n    };\n}\n\nexport const isLoading = (bool) => {\n    return {\n        type: ITEMS_IS_LOADING,\n        isLoading: bool\n    };\n}\n\n// Redux-thunk, \nexport const fetchData = (url) => {\n    // it returns a function!!!!\n    return (dispatch) => {\n        dispatch(isLoading(true));\n        fetch(url)\n            .then((response) => {\n                if (!response.ok) {\n                    throw Error(response.statusText);\n                }\n                dispatch(isLoading(false));\n                return response;\n            })\n            .then((response) => {\n                return response.json();\n            })\n            .then((items) => {\n                dispatch(fetchDataSuccess(items));\n            }).then(doneFetching())\n            .catch(() => dispatch(hasErrored(true)));\n    };\n}\n\nexport const fetchSingleItem = (url,index) => {\n    return (dispatch) => {\n        dispatch(isLoading(true));\n        fetch(url, {\n            method: 'GET',\n            mode: 'cors',\n            body: JSON.stringify({index}),\n            headers: {'Content-Type': 'application/json'}\n          })\n            .then((response) => {\n                if (!response.ok) {\n                    throw Error(response.statusText);\n                }\n                dispatch(isLoading(false));\n                return response;\n            })\n            .then((response) => {\n                return response.json();\n            })\n            .then((item) => {\n                dispatch(fetchDataSuccess(item));\n            })\n            .then(doneFetching())\n            .catch(() => dispatch(hasErrored(true)));\n    };\n}\n\n\nexport const fetchDataSuccess = (items) => {\n    return {\n        type: FETCH_DATA_SUCCESS,\n        items // this is ES6 property, it means \"items\":items or items:items\n    };\n}\n\n"]},"metadata":{},"sourceType":"module"}
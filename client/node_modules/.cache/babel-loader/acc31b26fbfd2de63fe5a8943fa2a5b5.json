{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Workspaces/cpsc436assignment2/client/src/components/ViewOneMessage.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchSingleItem } from '../actions/fetchActions';\nimport './style.css';\nimport Popup from './PopUp'; // import { BrowserRouter, Route, Link, Switch } from \"react-router-dom\";\n\nclass SeeOne extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    console.log(this.props.index);\n    this.props.showIndexMessage('http://localhost:3001/getMessages/' + this.props.index);\n  }\n\n  render() {\n    return (// <BrowserRouter> {/* browserRouter is a router component Generally speaking, you should use a <BrowserRouter> if you have a server that responds to requests and a <HashRouter> if you are using a static file server.*/}\n      //     <div>\n      //         <Link\n      //             to={'/popup/' + this.props.index}\n      //             onClick={this.handleClick}\n      //             id={this.props.index + 'View'}\n      //         >Edit</Link>\n      //         <Switch>\n      //             <Route path=\"/popup\" \n      //             render={(props) => <Popup {...props} idx={this.props.index} />}\n      //             />\n      //         </Switch> \n      //     </div>\n      // </BrowserRouter>\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"view\",\n        onClick: this.handleClick,\n        id: this.props.index + 'View',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"Edit\"), this.props.toPop && React.createElement(Popup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }))\n    );\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    toPop: state.fetchReducers.popUp\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    showIndexMessage: url => {\n      dispatch(fetchSingleItem(url));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SeeOne);","map":{"version":3,"sources":["/Users/mac/Workspaces/cpsc436assignment2/client/src/components/ViewOneMessage.js"],"names":["React","connect","fetchSingleItem","Popup","SeeOne","Component","constructor","props","handleClick","bind","console","log","index","showIndexMessage","render","toPop","mapStateToProps","state","fetchReducers","popUp","mapDispatchToProps","dispatch","url"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,QAAiC,yBAAjC;AACA,OAAO,aAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACA;;AACA,MAAMC,MAAN,SAAqBJ,KAAK,CAACK,SAA3B,CAAqC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACH;;AACDD,EAAAA,WAAW,GAAE;AACTE,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWK,KAAvB;AACA,SAAKL,KAAL,CAAWM,gBAAX,CAA4B,uCAAuC,KAAKN,KAAL,CAAWK,KAA9E;AACH;;AACJE,EAAAA,MAAM,GAAG;AACF,WACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,OAAO,EAAI,KAAKN,WAApC;AAAiD,QAAA,EAAE,EAAE,KAAKD,KAAL,CAAWK,KAAX,GAAmB,MAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEK,KAAKL,KAAL,CAAWQ,KAAX,IAAoB,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFzB;AAfJ;AAoBH;;AA9BgC;;AAgCrC,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHF,IAAAA,KAAK,EAAEE,KAAK,CAACC,aAAN,CAAoBC;AADxB,GAAP;AAGH,CAJD;;AAKA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACLR,IAAAA,gBAAgB,EAAGS,GAAD,IAAS;AACzBD,MAAAA,QAAQ,CAACnB,eAAe,CAACoB,GAAD,CAAhB,CAAR;AACD;AAHI,GAAP;AAKH,CAND;;AAOA,eAAerB,OAAO,CAACe,eAAD,EAAkBI,kBAAlB,CAAP,CAA6ChB,MAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchSingleItem }  from '../actions/fetchActions';\nimport './style.css'\nimport Popup from './PopUp'\n// import { BrowserRouter, Route, Link, Switch } from \"react-router-dom\";\nclass SeeOne extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    handleClick(){\n        console.log(this.props.index);\n        this.props.showIndexMessage('http://localhost:3001/getMessages/' + this.props.index);\n    }\n\trender() {\n        return (\n            // <BrowserRouter> {/* browserRouter is a router component Generally speaking, you should use a <BrowserRouter> if you have a server that responds to requests and a <HashRouter> if you are using a static file server.*/}\n            //     <div>\n            //         <Link\n            //             to={'/popup/' + this.props.index}\n            //             onClick={this.handleClick}\n            //             id={this.props.index + 'View'}\n            //         >Edit</Link>\n            //         <Switch>\n            //             <Route path=\"/popup\" \n            //             render={(props) => <Popup {...props} idx={this.props.index} />}\n            //             />\n            //         </Switch> \n            //     </div>\n            // </BrowserRouter>\n            <div>\n                <button type=\"view\" onClick = {this.handleClick} id={this.props.index + 'View'}>Edit</button>\n                {this.props.toPop && <Popup />}\n            </div>   \n        );\n    }\n}\nconst mapStateToProps = (state) => {\n    return { \n        toPop: state.fetchReducers.popUp,\n    };\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n      showIndexMessage: (url) => {\n        dispatch(fetchSingleItem(url));\n      }\n    }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SeeOne);"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Workspaces/cpsc436assignment2/client/src/components/PopUp.js\";\nimport React from 'react';\nimport './style.css';\nimport { connect } from 'react-redux';\nimport { closePopedMessage } from '../actions/popUpActions';\n\nclass Popup extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.changeEditMode = field => {\n      switch (field) {\n        case 'fromEditMode':\n          this.setState({\n            fromEditMode: true\n          });\n          break;\n\n        case 'toEditMode':\n          this.setState({\n            toEditMode: true\n          });\n          break;\n\n        case 'catEditMode':\n          this.setState({\n            catEditMode: true\n          });\n          break;\n\n        case 'contentEditMode':\n          this.setState({\n            contentEditMode: true\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.renderMessage = () => {\n      return React.createElement(\"div\", {\n        className: \"popup_inner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, this.state.fromEditMode ? React.createElement(\"input\", {\n        type: \"text\",\n        defaultValue: this.props.message.fromname,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        onDoubleClick: this.changeEditMode('fromEditMode'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"from : \", this.props.message.fromname), this.state.toEditMode ? React.createElement(\"input\", {\n        type: \"text\",\n        defaultValue: this.props.message.toname,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        onDoubleClick: this.changeEditMode('toEditMode'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"to : \", this.props.message.toname), this.state.catEditMode ? React.createElement(\"input\", {\n        type: \"text\",\n        defaultValue: this.props.message.category,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        onDoubleClick: this.changeEditMode('catEditMode'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"category: \", this.props.message.category), this.state.contentEditMode ? React.createElement(\"input\", {\n        type: \"text\",\n        defaultValue: this.props.message.textcontent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        onDoubleClick: this.changeEditMode('contentEditMode'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"content: \", this.props.message.textcontent), this.state.dateEditMode ? React.createElement(\"input\", {\n        type: \"text\",\n        defaultValue: this.props.message.date.toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        onDoubleClick: this.changeEditMode('dateEditMode'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"date: \", this.props.message.date.toString()), React.createElement(\"button\", {\n        type: \"close\",\n        onClick: this.props.closePopedMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"Cancel/Close\"), React.createElement(\"button\", {\n        type: \"edit\",\n        onClick: this.props.uploadChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"save change\"));\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"popup\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, this.renderMessage());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    message: state.fetchReducers.popUpMessage\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    closePopedMessage: () => {\n      dispatch(closePopedMessage());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Popup);","map":{"version":3,"sources":["/Users/mac/Workspaces/cpsc436assignment2/client/src/components/PopUp.js"],"names":["React","connect","closePopedMessage","Popup","Component","changeEditMode","field","setState","fromEditMode","toEditMode","catEditMode","contentEditMode","renderMessage","state","props","message","fromname","toname","category","textcontent","dateEditMode","date","toString","uploadChange","render","mapStateToProps","fetchReducers","popUpMessage","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './style.css'\nimport { connect } from 'react-redux';\nimport { closePopedMessage } from '../actions/popUpActions';\n\n\nclass Popup extends React.ComponentÂ {\n   \n    \n    changeEditMode = (field) => {\n      switch(field){\n        case 'fromEditMode':\n          this.setState({\n            fromEditMode : true\n          })\n          break;\n        case 'toEditMode':\n          this.setState({\n            toEditMode : true\n          })\n          break;\n        case 'catEditMode':\n          this.setState({\n            catEditMode : true\n          })\n          break;\n        case 'contentEditMode':\n          this.setState({\n            contentEditMode : true\n          })\n          break;\n        default:\n          break;\n      }\n    }\n\n    renderMessage = () => {\n      return (\n                <div className='popup_inner' >\n                  {this.state.fromEditMode ? <input type = 'text' defaultValue = {this.props.message.fromname}/> :\n                      <div onDoubleClick = {this.changeEditMode('fromEditMode')}>from : {this.props.message.fromname}</div>}\n                  \n                  {this.state.toEditMode ? <input type = 'text' defaultValue = {this.props.message.toname}/> :\n                      <div onDoubleClick = {this.changeEditMode('toEditMode')}>to : {this.props.message.toname}</div>}\n                  \n                  {this.state.catEditMode ? <input type = 'text' defaultValue = {this.props.message.category}/> :\n                      <div onDoubleClick = {this.changeEditMode('catEditMode')}>category: {this.props.message.category}</div>}\n\n                  {this.state.contentEditMode ? <input type = 'text' defaultValue = {this.props.message.textcontent}/> :\n                      <div onDoubleClick = {this.changeEditMode('contentEditMode')}>content: {this.props.message.textcontent}</div>} \n                  \n                  {this.state.dateEditMode ? <input type = 'text' defaultValue = {this.props.message.date.toString()}/> :\n                      <div onDoubleClick = {this.changeEditMode('dateEditMode')}>date: {this.props.message.date.toString()}</div>}\n\n                  <button type = 'close' onClick={this.props.closePopedMessage}>Cancel/Close</button>\n                  <button type = 'edit' onClick={this.props.uploadChange}>save change</button>\n                </div>\n              );\n    }\n\n    render() {\n      return (\n        <div className='popup'>\n            {this.renderMessage()}\n            \n        </div>\n      );\n    }\n}\nconst mapStateToProps = (state) => {\n    return { \n        message: state.fetchReducers.popUpMessage\n    };\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n      closePopedMessage: () => {\n        dispatch(closePopedMessage());\n      }\n    }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Popup);\n\n\n"]},"metadata":{},"sourceType":"module"}
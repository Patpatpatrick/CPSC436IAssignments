{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Workspaces/cpsc436assignment2/client/src/components/PopUp.js\";\nimport React from 'react';\nimport './style.css';\nimport { connect } from 'react-redux';\nimport { closePopedMessage } from '../actions/popUpActions';\n\nclass Popup extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderMessage = () => {\n      return React.createElement(\"div\", {\n        className: \"popup_inner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        defaultValue: this.props.message.fromname,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }), \" :\", React.createElement(\"div\", {\n        onDoubleClick: this.changeEditMode('fromEditMode'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, \"from : \", this.props.message.fromname), \"}\", this.state.toEditMode ? React.createElement(\"input\", {\n        type: \"text\",\n        defaultValue: this.props.message.toname,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        onDoubleClick: this.changeEditMode('toEditMode'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, \"to : \", this.props.message.toname), this.state.catEditMode ? React.createElement(\"input\", {\n        type: \"text\",\n        defaultValue: this.props.message.category,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        onDoubleClick: this.changeEditMode('catEditMode'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, \"category: \", this.props.message.category), this.state.contentEditMode ? React.createElement(\"input\", {\n        type: \"text\",\n        defaultValue: this.props.message.textcontent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        onDoubleClick: this.changeEditMode('contentEditMode'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"content: \", this.props.message.textcontent), this.state.dateEditMode ? React.createElement(\"input\", {\n        type: \"text\",\n        defaultValue: this.props.message.date.toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        onDoubleClick: this.changeEditMode('dateEditMode'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"date: \", this.props.message.date.toString()), React.createElement(\"button\", {\n        type: \"close\",\n        onClick: this.props.closePopedMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"Cancel/Close\"), React.createElement(\"button\", {\n        type: \"edit\",\n        onClick: this.props.uploadChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, \"save change\"));\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"popup\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, this.renderMessage());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    message: state.fetchReducers.popUpMessage\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    closePopedMessage: () => {\n      dispatch(closePopedMessage());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Popup);","map":{"version":3,"sources":["/Users/mac/Workspaces/cpsc436assignment2/client/src/components/PopUp.js"],"names":["React","connect","closePopedMessage","Popup","Component","renderMessage","props","message","fromname","changeEditMode","state","toEditMode","toname","catEditMode","category","contentEditMode","textcontent","dateEditMode","date","toString","uploadChange","render","mapStateToProps","fetchReducers","popUpMessage","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './style.css'\nimport { connect } from 'react-redux';\nimport { closePopedMessage } from '../actions/popUpActions';\n\n\nclass Popup extends React.ComponentÂ {\n\n    renderMessage = () => {\n      return (\n                <div className='popup_inner' >\n                  <input type = 'text' defaultValue = {this.props.message.fromname}/> :\n                      <div onDoubleClick = {this.changeEditMode('fromEditMode')}>from : {this.props.message.fromname}</div>}\n                  \n                  {this.state.toEditMode ? <input type = 'text' defaultValue = {this.props.message.toname}/> :\n                      <div onDoubleClick = {this.changeEditMode('toEditMode')}>to : {this.props.message.toname}</div>}\n                  \n                  {this.state.catEditMode ? <input type = 'text' defaultValue = {this.props.message.category}/> :\n                      <div onDoubleClick = {this.changeEditMode('catEditMode')}>category: {this.props.message.category}</div>}\n\n                  {this.state.contentEditMode ? <input type = 'text' defaultValue = {this.props.message.textcontent}/> :\n                      <div onDoubleClick = {this.changeEditMode('contentEditMode')}>content: {this.props.message.textcontent}</div>} \n                  \n                  {this.state.dateEditMode ? <input type = 'text' defaultValue = {this.props.message.date.toString()}/> :\n                      <div onDoubleClick = {this.changeEditMode('dateEditMode')}>date: {this.props.message.date.toString()}</div>}\n\n                  <button type = 'close' onClick={this.props.closePopedMessage}>Cancel/Close</button>\n                  <button type = 'edit' onClick={this.props.uploadChange}>save change</button>\n                </div>\n              );\n    }\n\n    render() {\n      return (\n        <div className='popup'>\n            {this.renderMessage()}\n            \n        </div>\n      );\n    }\n}\nconst mapStateToProps = (state) => {\n    return { \n        message: state.fetchReducers.popUpMessage\n    };\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n      closePopedMessage: () => {\n        dispatch(closePopedMessage());\n      }\n    }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Popup);\n\n\n"]},"metadata":{},"sourceType":"module"}